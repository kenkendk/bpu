// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace BPUSimulator {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class MemoryDump : MemoryDumpBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 6 ""
            this.Write("library IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.STD_LOGIC_UNSIGNED.ALL;\nuse IEEE.NUMERIC_STD.ALL;\n\nlibrary SYSTEM_TYPES;\nuse work.SYSTEM_TYPES.ALL;\n\nlibrary CUSTOM_TYPES;\nuse work.CUSTOM_TYPES.ALL;\n\npackage MEMORY_TYPES is\n\n    constant Memory_Size: INTEGER := 1024;\n    type T_MEMORY_STORAGE is array(0 to (Memory_Size-1)) of T_SYSTEM_UINT8;\n\n    procedure Memory_WriteStorage(constant address : in unsigned; constant value : in T_DATA; variable mem : out T_MEMORY_STORAGE);\n\n    pure function Memory_ReadStorage(constant address : in unsigned; constant mem : in T_MEMORY_STORAGE) return T_DATA;\n\n    procedure Memory_ReadStorage_Proc(constant address : in unsigned; constant mem : in T_MEMORY_STORAGE; variable res : out T_DATA);\n\n    constant Memory_IntialValues : T_MEMORY_STORAGE := (\n");
            
            #line default
            #line hidden
            
            #line 29 ""
 foreach(var b in memory) { 
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("        SYSTEM_UINT8(");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( b ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("),  \t--'");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Convert.ToString(b, 2).PadLeft(8, '0') ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("',\n");
            
            #line default
            #line hidden
            
            #line 31 ""
 } 
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("    others => (others => '0'));\n\nend MEMORY_TYPES;\n\npackage body MEMORY_TYPES is\n\n    procedure Memory_ReadStorage_Proc(constant address : in unsigned; constant mem : in T_MEMORY_STORAGE; variable res : out T_DATA) is\n    begin\n        res := mem(to_integer(address))");
            
            #line default
            #line hidden
            
            #line 40 ""

for (var i = 1; i < BPUImplementation.RegisterData.DATA_LENGTH; i++) { 
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write(" & mem(to_integer(address + ");
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( i));
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write("))");
            
            #line default
            #line hidden
            
            #line 42 ""
 } 
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(";\n    end Memory_ReadStorage_Proc;\n\n    pure function Memory_ReadStorage(constant address : in unsigned; constant mem : in T_MEMORY_STORAGE) return T_DATA is\n        variable r : T_DATA;\n    begin\n        Memory_ReadStorage_Proc(address, mem, r);\n        return r;\n    end Memory_ReadStorage;\n\n\n    procedure Memory_WriteStorage(constant address : in unsigned; constant value : in T_DATA; variable mem : out T_MEMORY_STORAGE) is\n    begin\n");
            
            #line default
            #line hidden
            
            #line 56 ""
 for (var i = BPUImplementation.RegisterData.DATA_LENGTH - 1; i >= 0; i--) { 
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write("        mem(to_integer(address + ");
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( i ));
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(")) := value(");
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ((i + 1) * 8) - 1 ));
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(" downto ");
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( i * 8 ));
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(");\n");
            
            #line default
            #line hidden
            
            #line 58 ""
 } 
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write("    end Memory_WriteStorage;\n\n\nend MEMORY_TYPES;\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class MemoryDumpBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
