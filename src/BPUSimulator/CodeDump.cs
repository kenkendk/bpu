// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace BPUSimulator {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class CodeDump : CodeDumpBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 6 ""
            this.Write("library IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.STD_LOGIC_UNSIGNED.ALL;\nuse IEEE.NUMERIC_STD.ALL;\n\nlibrary SYSTEM_TYPES;\nuse work.SYSTEM_TYPES.ALL;\n\nlibrary CUSTOM_TYPES;\nuse work.CUSTOM_TYPES.ALL;\n\npackage MICROCODE_SETUP is\n \ttype T_MICROCODE_PROGRAM is array(0 to TO_INTEGER(UNSIGNED(Microcode_MAX_INSTRUCTION_COUNT)-1)) of BPUImplementation_Microcode;\n \tconstant MICROCODE_PROGRAM : T_MICROCODE_PROGRAM := (\n");
            
            #line default
            #line hidden
            
            #line 20 ""
 foreach(var code in microcode) { 
	var waits = new string[] { code.rd_wait ? "read" : "", code.wr_wait ? "write" : "", code.ex_wait ? "execute" : "" }.Where(x => !string.IsNullOrWhiteSpace(x));
	var waitstr = waits.Count() == 0 ? "nothing" : string.Join(", ", waits);

	var writestr = code.wr_mem_valid ? string.Format("writing {0} elements from register {1} to @{2}, regstride = {3}, memstride = {4}", code.wr_mem_cnt, code.wr_mem_reg, code.wr_mem_adr, code.wr_mem_reg_stride, code.wr_mem_adr_stride) : "no writing";
	var readstr = code.rd_mem_valid ? string.Format("reading {0} elements from  @{1} to register {2}, regstride = {3}, memstride = {4}", code.rd_mem_cnt, code.rd_mem_adr, code.rd_mem_reg, code.rd_mem_reg_stride, code.rd_mem_adr_stride) : "no reading";
	var exstr = code.ex_valid ? string.Format("performing {0} {1} operations from registers {2},{3} into register {4}, strides = {5}, {6}, {7}", code.ex_cnt, code.ex_opcode, code.ex_src_reg1, code.ex_src_reg2, code.ex_dst_reg, code.ex_src_reg1_stride, code.ex_src_reg2_stride, code.ex_dst_reg_stride) : "no execute";


            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("              ('");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.rd_wait ? "1" : "0" ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("', '");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.wr_wait ? "1" : "0" ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("', '");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_wait ? "1" : "0" ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("', -- wait for ");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( waitstr ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("\n               '");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.wr_mem_valid ? "1" : "0" ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("', repcnt(");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.wr_mem_cnt ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("), memadr(");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.wr_mem_adr ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("), regno(");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.wr_mem_reg ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("), offsetcnt(");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.wr_mem_adr_stride ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("), offsetcnt(");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.wr_mem_reg_stride ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("), -- ");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( writestr ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("\n               '");
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.rd_mem_valid ? "1" : "0" ));
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write("', repcnt(");
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.rd_mem_cnt ));
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write("), memadr(");
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.rd_mem_adr ));
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write("), regno(");
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.rd_mem_reg ));
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write("), offsetcnt(");
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.rd_mem_adr_stride ));
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write("), offsetcnt(");
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.rd_mem_reg_stride ));
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write("), -- ");
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( readstr ));
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write("\n               '");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_valid ? "1" : "0" ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("', bpuimplementation_opcode_");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_opcode ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(", regno(");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_src_reg1 ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("), regno(");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_src_reg2 ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("), regno(");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_dst_reg ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("), offsetcnt(");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_src_reg1_stride ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("), offsetcnt(");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_src_reg2_stride ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("), offsetcnt(");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_dst_reg_stride ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("), repcnt(");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_cnt ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("), '");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_src1_mem ? "1" : "0" ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("', '");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.ex_src2_mem ? "1" : "0" ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("', -- ");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( exstr ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("\n               SYSTEM_UINT16(");
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( code.nextpc ));
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(")),\n\n");
            
            #line default
            #line hidden
            
            #line 35 ""
 } 
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write("    others => ('0','0','0', '0',repcnt(0),memadr(0),regno(0),offsetcnt(0),offsetcnt(0), '0',repcnt(0),memadr(0),regno(0),offsetcnt(0),offsetcnt(0), '0', BPUIMPLEMENTATION_OPCODE_NOOP,  regno(0),regno(0),regno(0),offsetcnt(0),offsetcnt(0),offsetcnt(0),repcnt(0),'0','0',   SYSTEM_UINT16(TO_INTEGER(UNSIGNED(Microcode_MAX_INSTRUCTION_COUNT)-1)))\n);\nend MICROCODE_SETUP;");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CodeDumpBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
